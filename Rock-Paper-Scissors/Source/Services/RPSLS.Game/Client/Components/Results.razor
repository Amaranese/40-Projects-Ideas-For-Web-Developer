
<div class="result console-screen @resultStyle">
    <p class="console-text">@result.User</p>
    <div class="user-picks">
        <div class="user-picks-container">
            <div class="user-picks-items">
                <div class="user-hand">
                    <img src='@("/assets/images/png/hands/"+ userImage +"/"+result.UserPick+".png")'>
                </div>
                <p class="pick-text">@BattleHelper.MapPick(result.UserPick)</p>

                <p class="pick-text text-result">@resultMessage</p>
                @if (userIsWinner || userIsLoser)
                {
                    <p class="pick-text text-message">@CreateMessage(result.UserPick, result.ChallengerPick)</p>
                }
            </div>
        </div>
    </div>
    <div class="custom-button-container">
        <div class="custom-button">
            @PlayAgainButton
        </div>
    </div>
</div>
<div class="console-vs">
    <div class="vs-circle">
        <p class="vs-text">VS</p>
    </div>
</div>
<div class="result console-screen">
    <p class="console-text">@Game.Challenger.DisplayName</p>
    <div class="challenger-picks">
        <div class="challenger-result challenger-picks-container">
            @if (result.IsValid)
            {
                <div class="challenger-picks-items">
                    <div class="opponent-hand">
                        <img src='@("/assets/images/png/hands/" + challengerImage + "/" + result.ChallengerPick + ".png")' />
                    </div>
                    <p class="pick-text">@BattleHelper.MapPick(result.ChallengerPick)</p>
                </div>
            }
            else if (error != null)
            {
                <div class="opponent-hand-error">
                    <img src='@("/assets/images/png/" + error.Image)'>
                    <h2>@error.Text</h2>
                </div>
            }
        </div>
    </div>
    <div class="custom-button-container">
        <div class="custom-button">
            @ChooseOpponent
        </div>
    </div>
</div>

@code
{
    [Parameter] public IGameService Game { get; set; }

    [Parameter] public RenderFragment PlayAgainButton { get; set; }

    [Parameter] public RenderFragment ChooseOpponent { get; set; }

    ResultDto result = new ResultDto();
    string resultMessage = string.Empty;
    bool userIsWinner = false;
    bool userIsLoser = false;
    string resultStyle = "";
    string userImage = "";
    string challengerImage = "";
    ChallengerErrorViewModel error = null;
    ChallengerErrorViewModel[] errors = new ChallengerErrorViewModel[]
    {
        new ChallengerErrorViewModel() { Name = "python", Text = "how did I get here?", Image = "node-error.png" },
        new ChallengerErrorViewModel() { Name = "node", Text = "oooops, I have to update the rocket", Image = "node-error.png" },
        new ChallengerErrorViewModel() { Name = "dotnet", Text = "how did I end here?", Image = "node-error.png" },
        new ChallengerErrorViewModel() { Name = "java", Text = "how did I end here?", Image = "node-error.png" },
        new ChallengerErrorViewModel() { Name = "php", Text = "how did I end here?", Image = "node-error.png" }
    };



    protected override void OnInitialized()
    {
        result.UserPick = Game.Pick;
        result = Game.GameResult;

        if (result.IsValid)
        {
            resultMessage = CreateResult(result.Result);
            userIsWinner = result.Result == 1;
            userIsLoser = result.Result == 2;
        }

        resultStyle = GetResultClass(result.Result);
        error = errors.FirstOrDefault(c => c.Name == result.Challenger);
        var imageNames = GetPlayerImages(result);
        userImage = imageNames.UserImage;
        challengerImage = imageNames.ChallengerImage;
    }

    private string GetResultClass(int result)
    {
        return result switch
        {
            1 => "winner",
            2 => "loser",
            _ => ""
        };
    }

    private string CreateResult(int result)
    {
        return result switch
        {
            1 => "you win!!",
            2 => "you lose!!",
            _ => "tie!!"
        };
    }

    private static string MapAction(int winner, int loser)
    {
        return winner switch
        {
            0 => "crushes",
            1 => loser == 0 ? "covers" : "disproves",
            2 => loser == 1 ? "cuts" : "decapitates",
            3 => loser == 1 ? "eats" : "poisons",
            4 => loser == 0 ? "vaporizes" : "smashes",
            _ => "ties"
        };
    }

    private string CreateMessage(int userPick, int challengerPick)
    {
        var userPickText = BattleHelper.MapPick(userPick);
        var challengerPickText = BattleHelper.MapPick(challengerPick);

        if (userIsWinner)
        {
            return $"{userPickText} {MapAction(result.UserPick, result.ChallengerPick)} {challengerPickText}";
        }

        return $"{challengerPickText} {MapAction(result.ChallengerPick, result.UserPick)} {userPickText}";
    }

    private (string UserImage, string ChallengerImage) GetPlayerImages(ResultDto result)
    {
        var humanChallengers = new string[] { "user", "challenger" };
      
        if (humanChallengers.Contains(result.Challenger))
        {
            return (result.IsGameInitiator ? "user" : "challenger", !result.IsGameInitiator ? "user" : "challenger");
        }

        return ("user", result.Challenger);

        

    }
}
