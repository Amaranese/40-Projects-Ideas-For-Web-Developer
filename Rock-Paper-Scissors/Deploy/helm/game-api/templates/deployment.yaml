{{- $name := include "rpsls-game.fullname" $ -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "rpsls-game.fullname" . }}
  labels:
    app: {{ template "rpsls-game.name" . }}
    chart: {{ template "rpsls-game.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "rpsls-game.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "rpsls-game.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: gameapi
      {{ if .Values.imagePullSecrets -}}
      imagePullSecrets:
      {{ range .Values.imagePullSecrets -}}
        - name: {{ .name }}
      {{- end -}}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap }}
          envFrom:
          - configMapRef:
              name: {{ $cfgname }}
          {{- end }}    
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: grpc
              containerPort: 81
              protocol: TCP              
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}     
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- if .Values.kv.enabled }}
          volumeMounts:
          - name: azure-kv
            mountPath: /kvmnt
            readOnly: true
          {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if .Values.kv.enabled }}
      volumes:
      - name: azure-kv
        flexVolume:
          driver: "azure/kv"
          secretRef:
            name: {{ .Values.kv.secretName }}
          options:
            keyvaultname: "{{ .Values.kv.name }}"               
            keyvaultobjectnames: cosmos-constr
            keyvaultobjecttypes: secret  
            tenantid: "{{ .Values.kv.tenant }}" 
    {{- end -}}